import pymongo
from pymongo import MongoClient
import datetime
import pandas as pd
import numpy as np
import gc
gc.enable()



client = MongoClient('45.122.223.198:27017',               	#IP address of database
                    username = 'kpi-v2R',          		#Username
                    password = 'EecvKJxdTQ1JEK8J2FA',         	#Password
                    authSource = 'kpi-v2',                	#name of database
                    authMechanism = 'SCRAM-SHA-1')
kpitest = client['kpi-v2']

client_1 = MongoClient('45.122.223.198:27017',             	#IP address of database
                    username = 'kapiReadOnly',              	#Username
                    password = 'pl2oieAt9#tnWV!Yc0',         	#Password
                    authSource = 'kapi',                   	#name of database
                    authMechanism = 'SCRAM-SHA-1')
kapi = client_1['kapi']



def int_fun(post_id):
    cluster1 = kapi['reactions'].find({'fid': {'$in': post_id}},
                                            {'_id': 0, 'fid': 1, 'from_user_id': 1})
    cluster2 = kapi['comments'].find({'post_id': {'$in': post_id}},
                                           {'_id': 0, 'post_id': 1, 'from_raw_user': 1, 'from_user': 1})
    cluster3 = kapi['posts'].find({'parent_id': {'$in': post_id}},
                                        {'_id': 0, 'parent_id': 1, 'from_user': 1, 'comments_count': 1,
                                         'likes_count': 1})

    tb1 = pd.DataFrame()
    for a in cluster1:
        tmp = pd.DataFrame([a])
        tb1 = tb1.append(tmp, ignore_index=True)

    tb2 = pd.DataFrame()
    for b in cluster2:
        tmp = pd.DataFrame([b])
        tb2 = tb2.append(tmp, ignore_index=True)

    tb3 = pd.DataFrame()
    for c in cluster3:
        tmp = pd.DataFrame([c])
        tb3 = tb3.append(tmp, ignore_index=True)

    for i in range(len(tb2)):
        if tb2.from_user[i] == '':
            tb2.from_user[i] = tb2.from_raw_user[i]

    #gc.collect()

    return tb1, tb2, tb3


def info_fun(fid_list):
    cluster = kapi['posts'].find({'fid': {'$in': fid_list}},
                                       {'_id': 0, 'fid': 1, 'to_user': 1, 'created_date': 1,
                                        'comments_count': 1, 'shares_count': 1, 'likes_count': 1})

    info_tb = pd.DataFrame()
    for i in cluster:
        tmp = pd.DataFrame([i])
        info_tb = info_tb.append(tmp, ignore_index=True)

    gc.collect()

    return info_tb


def retrieve_fun(id_list, industry, start_date, end_date, speed):
    tab1 = kpitest['posts'].find({'from_user': {'$in': id_list}, 'brand': {'$ne': None},
                                  'created_date': {'$gte': start_date, '$lt': end_date},
                                  'industry': industry
                                     }, {
                                        '_id': 0, 'fid': 1, 'brand': 1
                                    })

    ipt = pd.DataFrame()
    for i in tab1:
        tmp = pd.DataFrame([i])
        ipt = ipt.append(tmp, ignore_index=True)

    print("There are {:} messages for processing .".format(len(ipt)))

    int_tmp = pd.DataFrame()
    cmt_tmp_tb = pd.DataFrame()
    shr_tmp_tb = pd.DataFrame()
    len_tmp = (len(ipt) // speed + 1)

    try:
        for i in range(len_tmp):
            print('==Processing to==> {:.4}%'.format(((i + 1) * 100) / len_tmp))
            tb1_tmp, tb2_tmp, tb3_tmp = int_fun(ipt['fid'][i * speed:(i + 1) * speed].tolist())
            int_tmp = int_tmp.append(tb1_tmp, ignore_index=True)
            cmt_tmp_tb = cmt_tmp_tb.append(tb2_tmp, ignore_index=True)
            shr_tmp_tb = shr_tmp_tb.append(tb3_tmp, ignore_index=True)
    except pymongo.errors.CursorNotFound:
        print("Lost cursor. Retry with skip")

    cmt_tmp = pd.DataFrame({'fid': cmt_tmp_tb.post_id, 'from_user_id': cmt_tmp_tb.from_user})
    shr_tmp = pd.DataFrame({'fid': shr_tmp_tb.parent_id, 'from_user_id': shr_tmp_tb.from_user})

    shr_tmp_tb['sub score'] = shr_tmp_tb['comments_count'] + shr_tmp_tb['likes_count']
    af_tmp = shr_tmp_tb.groupby('parent_id').agg({'sub score': 'sum'}).reset_index()
    af_tmp.columns = ['fid', 'sub score']

    total_int_tmp = int_tmp.append([cmt_tmp, shr_tmp]).drop_duplicates().reset_index(drop=True)
    total_int_tmp = total_int_tmp.groupby('fid').agg('count')
    total_int_tmp = af_tmp.set_index('fid').join(total_int_tmp, how='right')

    post_query_tmp = info_fun(total_int_tmp.index.tolist())
    post_query_tmp = post_query_tmp.set_index('fid')

    combine_tb = total_int_tmp.join(post_query_tmp)
    combine_tb = combine_tb.join(ipt.set_index('fid'))
    combine_tb['AF score'] = [np.nansum([x, y]) for x, y in
                              zip(combine_tb['from_user_id'], combine_tb['sub score'])];

    gc.collect()

    return combine_tb


a_list = ["322004096814", "249295085540", "348264028587732", "100783053818249", "480981821930289",
"556707117872204", "153475957997899", "145082888895963", "180117826609", "131170470276149",
"144218352454605", "104241402979600", "149461478419983", "138198889550309", "458190347605268",
"347414245325444", "409834799073927", "136721003396481", "1414486692211613", "197890013570692",
"140219802708012", "1441158159541270", "181151673158", "340280489439780", "593126640763600",
"518043098235865", "960842940640368", "651136978303141", "466628406804348", "1555427368058884",
"1818381175039929", "695639327282710", "658889097618971", "100004457400857", "100010474243709",
"1071920079", "585585786", "100004869675152", "1003483148", "100003159213139", "709364546",
"100003799232476", "1270650092", "100000029240149", "757372954", "100002615274884", "1037096430",
"100000161231451", "100001841630546", "684600531", "1800264379", "100001153218149", "1368099604",
"100001857608597", "1269602727", "559882714", "100000067844236", "100004555983909", "1794342963",
"100000320035026", "532951315", "100000365662994", "1686253949", "539258520", "1535707194",
"697953882", "100002647920251", "1733527628", "1724361904", "100000020547113", "795633080",
"617030023", "100000198276725", "709478318", "1508021259", "1331816102", "100005652451345",
"100004765061969", "100004968486790", "709322632", "503477156", "771333291", "698970041",
"1814950127", "100002385194480", "100001939257057", "100000260268775", "100005234478706",
"1040244313", "1134915007", "1671392451", "100001103869733", "766769864", "100001054040248",
"1784981625", "100008835062694", "100000205191297", "623472237762428", "513541955435262",
"1586600441607124", "270070359820854", "132578406895217", "1747174842241027", "311739632355636",
"309972372349806", "107753422479", "196442413719147", "171751199674", "100000009146191",
"100002734181466", "145810139249684", "232934330224490", "332042093538446", "227853940672656",
"1734398016795960", "1619988158252520", "452121794897171", "834300496620178", "586471454734043",
"1086038201409970", "1599378020306220", "1578284952445750", "1776605655924820", "124707154243128",
"1737930789760090", "1454015388243200", "934843353261264", "138261313325928", "133085353369973",
"166862283450049", "384047841736576", "1453146458256330", "362395423887939", "1427949400800950",
"148313395341258", "650637928358966", "932553246888951", "822308374492895", "122102927812763",
"984108548351141", "122560801571408", "932672373542280", "114771895207322", "244817019505888",
"182855912297091", "426544150717102", "627837993971505", "1567937303521670", "235703019886838",
"619751094730053", "421806394548949", "308356949312694", "190869737647555", "135929096496292",
"932672373542280", "1447814628830260", "552290634866763", "227938223898928", "823149677701937",
"609303922472342", "1977812942259230", "100018747012079", "100000079497637", "100000154057405",
"100004294322305", "100005871733612", "100005379788218", "100000346576277", "100001773979357",
"100001536644622", "100001105953913", "100007046012116", "100011800291171", "100004587455300",
"1152666961", "100003549326887", "100006673744320", "100005762673645", "639243065",
"100001418031144", "100000140034365", "100000200416387", "1820779485", "792112070",
"100005102344459", "100001527612391", "100000087245438", "737522356", "1813609485",
"100001203903024", "726459997", "100000346576277", "1184288168", "612457530", "1815374289",
"713962948", "991473244247679", "100002925645504", "100000024986136", "1525957184368292",
"422721064438074", "1405462003056039", "955329157926412", "429300583784286", "1811892812375557",
"515281261907094", "1077445478971420", "700070140005444", "386981281345063", "157047117006",
"1490649897906059", "400564340152929", "272823036214692", "497681210270345", "1736002153287053",
"119862095246612", "232461687250900", "128768491233896", "285757994777549", "319861388454773",
"285757994777549", "294067024320130", "657230107662540", "982893771815826", "2021818394720178",
"1748451012073433", "1078150692266629", "556065324536565", "727743547235782", "558702127594646",
"318092495364075", "228943997556127", "619253211520737", "368671033281996", "153740148098439",
"105557324613", "463739207001245", "1440032912983340", "750526488320391", "189822711065364",
"245796775505303", "518642984983091", "587121241675981", "108220253228830", "488911144490544",
"100006134349556", "100010392674593", "100001852669374", "100001229816317", "100005723490568",
"100009245697661", "100006492785190", "100001769831577", "100001595037898", "100002952919951",
"100004469437434", "100001855232855", "100003845755366", "100000088513227", "100000106878122",
"100003215154391", "1604596120", "1219487932", "100002262743138", "100011773579602",
"100004405623635", "100001840586136", "100001627090227", "1237847499", "100006059135882",
"100002574760079", "1365971724", "100002952941432", "1017051403", "100000001126549",
"100003968038799", "100004557123611", "100000941004296", "100004237386927", "100003727116665",
"100001518550025", "100003816980588", "100001596172934", "100009426641769", "100004113280334",
"100000641426063", "100011674677384", "100003330483547", "100003862134655", "100002708846347",
"1767430225", "100003142307134", "100000494103537", "1419834457", "100000794801733",
"100001265206581", "100000356650072", "1444173639", "100001277921015", "100002561182666",
"100003943474310", "100000216274240", "100000339992442", "100012326612818", "100010505070292",
"1810181763", "100003614197876", "100005110170594", "100001629034111", "100000271946723",
"100003924022904", "100004076087178", "100002553036300", "100006420215070", "100003263726351",
"100003935356505", "100004868344872", "100000578800959", "100003203830225", "100003166599975",
"100014723588631", "100002476444897", "100006962615305", "100006331954330", "100006251465358",
"100017060617089", "100014955876506", "1797695590515780", "108220253228830", "400564340152929",
"100006577177813", "100011400657040", "100003263364598", "100000334878230", "100007251934595",
"100000197527970", "100003988022319", "728422155", "100003812164617", "100004097630026",
"1629319941", "100000988252308", "100002947761648", "100004779762337", "100003151447930",
"100002986621170", "100009513077072", "100014685724269", "100003088237603", "1249830805",
"100003176091559", "100000221670533", "548720348", "1835930490064391", "904966679673017",
"1829163077103642", "956710374370773", "1945841945729588", "351252875396980", "131377857475275",
"964177403680610", "1370812032973414", "100004537654030", "100003499339257", "951485141589180",
"1551038015145576", "874175242657373", "100004082664239", "100000621734113", "1422102858106969",
"2204405780", "1610251709227473", "283827645338302", "658031047711852", "1505520679760416",
"133847706807220", "130564240671915", "1355827397848634", "170889419917596", "176683016043623",
"1456837144426810", "1387478278178670", "1242571509122480", "795834210461805", "790802001086004",
"520004611470384", "459984100852903", "410089389134373", "345088712520936", "205400663141440",
"131343380920821", "1661722147442968", "1456837144426814", "414022645601874", "901462783250530",
"565350380311101", "249673012104709", "916222688511064", "390828604594553", "1222817554463980",
"1422391671400544", "1010018635775121", "236949996748668", "1558937937750935", "1697633963817719",
"1561705453891638", "1446695262117394", "629365833918685", "452496231611752", "343701089158684",
"1146655782030660", "100013855868516"]

gc.collect()

start_date = datetime.datetime(2018,10,1) #Year, Month, Day of start date
end_date = datetime.datetime(2019,1,1)  #Year, Month, Day of end date
industry = 'smartphone'

r_tb = retrieve_fun(a_list, industry, start_date, end_date, speed=10)

BA = (r_tb.groupby(['to_user', 'brand'])
      .agg({'AF score': lambda x: sum(x*np.log(x))})
      .reset_index()
      .sort_values('AF score', ascending=False)
      .rename({'to_user': 'from_user',
               'AF score': 'BA score'}, axis='columns'))


BA.to_csv('BA_score.csv')

